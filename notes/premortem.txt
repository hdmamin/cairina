Start date: wed 2/1/23
Soft end date: ??? - this might be a multi-phase project. Should probably commit to taking a break (if I'm not finished) after some amount of time, e.g. 3 or 6 months. Let's set a soft target of sun 7/2 to finish phase 1 (informative and possibly interactive error messages, natural language debugger, jupyter magic, and possible nb/lab extension). Then after the break I can either:
a. switch to an entirely different project, or
b. build the nb/lab extension if that gets pushed out, or
c. build something involving hot reloading (e.g. auto debug or iterative ai coder), or
d. my LLM native programming language/evolution of programming, if I have a more fleshed out vision at that point

Final Product
-------------
Required:
- >=1 installable package
    -with a sane dependency list, i.e. don't require all jabberwocky deps around youtube/wikipedia/etc. to be installed just to get talking error messages
- >=2 different tools (e.g. debugger + nb extension; probably quite a few more)
- share in >= 1 place (e.g. LA DS slack, work slack, twitter, github pages blog, sharpest minds tech talk, sf/oakland python talk, r/python)

Optional:
-most things? Have like 5 different ideas for what tools could look like, way more than the 2 required

Concepts
--------
-Large language models
-programming, maybe compilers eventually

Tech
----
-might require learning typescript/javascript (if I got nb/labextension route)

What could go wrong?
--------------------
1. Burnout
[SOLUTION]
-no MOOCs, keep edu reading very optional
-try to maintain a few small cognitively lazy tasks at all times (e.g. writing a docstring) so I can choose an extra light day if necessary.
-whenever possible, place easy task first in dailies. Reduces reluctance to start.
-rule: min target of 20 minutes (forgot it was that low last time, I enjoyed it so much)
-rule: if weekday AND mentor day, min target is 5 minutes (basically knock out 1 lazy task, e.g. docstring, and write tomorrows dailies)

2. Temptation for scope creep
[SOLUTION]
-maybe don't need to avoid this necessarily - if anything, I kind of hope this turns into a multi-year project. But I do need to enforce time for a break if things stretch on too long. Adding reminder for the 4 month mark.

3. Disillusioned bc new codex/gpt blows this out of the water before I finish
[SOLUTION]
-this is possible and there's not much I can do if fit happens (by happens, I'm talking "models good enough that human coders are already obsolete"). But I think it's sufficiently unlikely to happen on this timescale, and even if it does, that provides even more reason to pursue the long term goal here, i.e. to design the next generation of programming.
-similarly, someone else might release (or have already released) a similar package(s). But, meh. Should be fun to implement regardless, and partly that would just validate this as a worthwhile idea.

Lessons from last time
----------------------
-Not directly related to this project, moreso related to recent chatgpt news and jabberwocky: a lot of the obvious things to build with models will be built soon-ish by big, well-funded teams. If you still feel it's worth it (and in this case it still mostly was - jabberwocky-alexa provides easy alexa interface, came out a lot sooner, and can mimic different people), go for it, just don't be caught by surprise. That could get discouraging.
    > A good reminder. Code is certainly an area where companies have a lot of incentive to invest resources, though I am focusing on it from a slightly different angle than most of them, I think.
-Everything takes way, way longer than you expect. "Double your conservative estimate" might be a good heuristic lol.
    > Fair enough. Hence my thinking around the mandatory break partway through.
-Keep standards (re interest levels) high when selecting next project. Reading through last postmortem, I was considerably more excited and now that I can choose anything to work on, I should try to tap into that again. Don't settle.
    > I do think this is pretty worthwhile. The errors/debugger are not the MOST exciting but they're exciting enough, and they'll hopefully help me start thinking about more ambitious future goals.
-Code injection/whisper queue stuff was fun, which makes me think I should try to pick something that allows for 1 or both of:
    1. technically challenging programming or python black magic/hackery
    2. Very cool output (e.g. live speech -> text)
        Basically, there should be moments where I look at what I just built and think, for better or for worse, "holy crap, I can't believe this is possible".
    > I think this could satisfy both.
-My idea from a couple projects ago about a writing or soft skills project is still interesting, but I think now is not the right time for it. Now is the time for something creative, technically challenging, exciting. Either very experimental/researchy or something with a very cool real world end creation.
    > Check.

Summary: The hope here is to rekindle my love of programming AND spark inspiration for longer term efforts around this area. Lean into scope creep on some level, just be disciplined about *when* to implement things.
